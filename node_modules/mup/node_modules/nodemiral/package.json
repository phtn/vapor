{
  "name": "nodemiral",
  "version": "1.1.1",
  "description": "Server Automation for NodeJS over SSH",
  "main": "lib/nodemiral.js",
  "dependencies": {
    "ejs": "0.8.x",
    "debug": "0.7.x",
    "colors": "0.6.x",
    "ssh2": "0.4.6",
    "underscore": "1.8.x",
    "progress": "1.1.5",
    "async": "0.9.0"
  },
  "devDependencies": {
    "mocha": "1.x",
    "sinon": "1.14.x"
  },
  "scripts": {
    "test": "./node_modules/.bin/mocha"
  },
  "readme": "# nodemiral (node + admiral) [![Build Status](https://travis-ci.org/arunoda/nodemiral.png?branch=master)](https://travis-ci.org/arunoda/nodemiral)\n### Server Automation for NodeJS over SSH\n\n## Install\n~~~js\nnpm install nodemiral\n~~~\n\n## Features\n\n* Support connecting to any unix remote server\n* Authenticate with password(using [`sshpass`](http://sourceforge.net/projects/sshpass/)) or with a `pem` file\n* Can work with multiple servers at once\n* Supports, `copy`, `execute` and `executeScript` at core methods\n* Familiar NodeJS API\n\n## Example\n~~~js\nvar nodemiral = require('nodemiral');\nvar session = nodemiral.session('hostname', {username: 'root', password: 'password'});\n\nsession.execute('uname -a', function(err, code, logs) {\n  console.log(logs.stdout);\n});\n~~~\n\n## API\n\n### Session\n\nCreate a session to a remote server. You can invoke following methods after created a session\n\n    @param hostname - hostname or ip addess\n    @param auth - object containing following fields: `username` and (`password` or `pem`)\n    @param options - object of options described below\n    nodemiral.session(hostname, auth, options);\n\n`options`:\n\n* `ejs` - ejs options with `ejs` fields\n* `ssh` - object whose key and value will be passed as `-o key:value` to any ssh session. For example `{ 'StrictHostKeyChecking': 'no', 'UserKnownHostsFile': '/dev/null' }`\n\n### Session Methods\n\n#### execute\nexecute given shell command on the remote server\n\n    @param shellCommand - shellCommand\n    @param options - {onStdout, onStderr}\n    @param callback - callback containing following parameters\n      err - err if exists\n      code - status code of the ssh process\n      logs - {stdout: 'stdout logs', stderr: 'stderr logs'}\n    session.execute(shellCommand, callback);\n\n#### executeScript\nexecute a local shell script in the remote server. You can template shell script with [EJS](https://github.com/visionmedia/ejs).\n\n    @param localScriptFile - localScriptFile\n    @param options.vars - variables to the template if uses ejs in the script\n    @param callback - callback containing following parameters\n      err - err if exists\n      code - status code of the ssh process\n      logs - {stdout: 'stdout logs', stderr: 'stderr logs'}\n    session.executeScript(localScriptFile, options, callback);\n\n#### copy\ncopy a file from local machine to the remote machine. Supports binary files too. Support EJS templating with non-binary files\n\n    @param localFile - localFile\n    @param remoteFileLocation - remoteFileLocation\n    @param options.vars - templateVars\n    @param optiosn.progressBar - show progress bar\n    @param callback - callback containing following parameters\n      err - err if exists\n      code - status code of the ssh process\n      logs - {stdout: 'stdout logs', stderr: 'stderr logs'}\n    session.copy(localFile, remoteFileLocation, options, callback)\n",
  "readmeFilename": "README.md",
  "_id": "nodemiral@1.1.1",
  "_from": "nodemiral@^1.1.1"
}
